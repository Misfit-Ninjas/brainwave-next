import dataclasses
import hashlib
import importlib
import inspect
import os
import pathlib
import pkgutil
import re
import sys

import click


sys.path.append(
    str(pathlib.Path(os.path.realpath(__file__)).parent.parent.parent)
)  # Add backend root directory


@click.command()
@click.argument("neurons_dir", type=click.Path(exists=True))
@click.argument("output_file", type=click.Path())
def main(neurons_dir, output_file):
    exclude_re = re.compile(r"(^_)|(\._)")  # Ignore any "private" underscore modules

    old_hash = hashlib.sha256(open(output_file, "rb").read()).hexdigest()

    with open(output_file, "w") as output:
        neurons = [
            pkg.name
            for pkg in pkgutil.walk_packages([neurons_dir])
            if not (exclude_re.match(pkg.name) or pkg.ispkg)
        ]

        output.write("<!-- This file is automatically generated. Do not edit! -->\n\n")
        output.write("| Neuron | description | config params | run signature |\n")
        output.write("|--------|-------------|---------------|---------------|\n")

        for neuron_name in sorted(neurons):
            neuron = importlib.import_module(neuron_name)
            neuron_desc = neuron.__doc__
            neuron_configs = ", ".join(
                f"`{field.name}`" for field in dataclasses.fields(neuron.Config)
            )
            neuron_run = f"run {inspect.signature(neuron.run)}"
            output.write(
                f"| `{neuron_name}` | {neuron_desc} | {neuron_configs} | `{neuron_run}` |\n"
            )

    new_hash = hashlib.sha256(open(output_file, "rb").read()).hexdigest()

    print("OK")

    if old_hash != new_hash:
        raise click.ClickException("File contents were modified by the script")


if __name__ == "__main__":
    main()
